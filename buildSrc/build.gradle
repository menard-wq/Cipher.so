apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.novoda.bintray-release'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.novoda:bintray-release:0.9.2'
    }
}

repositories {
    mavenCentral()
    jcenter()
    google()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'com.android.tools.build:gradle:3.6.4'
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"


archivesBaseName = 'cipher.so'
version = 'v0.0.0.1-alpha-2'

task zipNativeArchive(type: Zip) {
    destinationDir project.file("build/libs")
    archiveName "$archivesBaseName-${version}.jarx"
    from project.zipTree("build/libs/$archivesBaseName-${version}.jar")
    include "META-INF/**"
    include "net/**"
    from "${project.rootProject.file("devso").canonicalPath}"
    include "src/main/**"
    include "CMakeLists.txt"
    exclude "src/main/cpp/include/extern-keys.h"
    exclude "src/main/java/net/idik/lib/cipher/so/devso/**"
    exclude "src/main/jni"
    exclude "src/main/res/**"
    exclude "src/main/AndroidManifest.xml"

    doLast {
        def originJar = project.file("build/libs/$archivesBaseName-${version}.jar")
        def xJar = project.file("build/libs/$archivesBaseName-${version}.jarx")
        originJar.delete()
        xJar.renameTo(originJar)
    }

}

tasks['jar'].finalizedBy zipNativeArchive


uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}

Properties properties = new Properties()
properties.load(project.file('../local.properties').newDataInputStream())

publish {
    userOrg = 'ins-cipher'
    groupId = 'net.idik.lib.security'
    artifactId = archivesBaseName
    publishVersion = project.version
    desc = 'A sample way to store secure message in .so librarly'
    website = 'https://github.com/menard-wq/Cipher.so'
    repository = 'https://github.com/menard-wq/Cipher.so.git'
    repoName = 'Cipher.so'
    bintrayUser = properties.getProperty('userName')
    bintrayKey =  properties.getProperty('userPass')
    dryRun = false
}